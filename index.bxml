<x:document xmlns:x="http://local/" width="flex"
            title="Planet generation">

  <x:published>19 Oct 2018</x:published>
  
  <x:draft/>

  <style>
      body.widthflex section > figure { width: unset; max-width: unset; }
      canvas { max-width: 90vmin; }
  </style>
  
  <x:section>

    <p>
      I usually work with 2D map generation, in part because it's easier, but also in part because I enjoy 2D heightmap games more than 3D map games. For <a href="http://www.procjam.com/">ProcJam 2018</a> I decided to try working with spheres. <a href="CODEX.html">Notes will go here</a>. Step 1: <a href="fibonacci-sphere.html">Fibonacci Sphere</a>.
    </p>

    <p>
      <button onclick="setAlgorithm(1)">Algorithm 1</button>
      <button onclick="setAlgorithm(2)">Algorithm 2</button>
      <br/>
      Number of points on sphere:
      <input type="range" min="1" max="5" step="0.001" value="4" oninput="setN(Math.pow(10, this.valueAsNumber) | 0)" style="width:50ex"/>
      <br/>
      Jitter: <input type="range" min="0" max="1" step="0.001" value="0" oninput="setJitter(this.valueAsNumber)" style="width:50ex"/>
      <br/>
      Sphere rotation: <input type="range" min="-5" max="5" step="0.001" value="0" oninput="setRotation(this.valueAsNumber)" style="width:50ex"/>
    </p>
    
    <figure>
      <canvas id="output" width="1024" height="1024"/>
    </figure>
    
  </x:section>

  <x:footer>
    <script src="/js/regl.js"/>
    <script src="https://unpkg.com/delaunator@3.0.2/delaunator.js"/>
    <script src="https://unpkg.com/gl-matrix@2.7.0/dist/gl-matrix.js"/>
    <script src="planet-generation.js"/>
    
    Created 19 Oct 2018; &#160;
    <!-- hhmts start -->Last modified: 20 Oct 2018<!-- hhmts end -->
  </x:footer>
  
  
</x:document>

